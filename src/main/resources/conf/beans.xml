<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
 	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd"
	default-lazy-init="true">


	<dubbo:application name="ums3-client2" />


	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url2}" />
		<property name="username" value="${jdbc.username2}" />
		<property name="password" value="${jdbc.password2}" />
		<property name="initialSize" value="${jdbc.minsize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxsize}" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="false" />
		<property name="filters" value="stat" />
	</bean>

	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
		<property name="typeAliasesPackage" value="com.model" />
		<property name="configLocation" value="classpath:/conf/mybatisConfig.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		  p:sqlSessionFactoryBeanName="sqlSessionFactory2" p:basePackage="com.dao" />

	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory2"></constructor-arg>
	</bean>

	<!-- 业务使用 -->
	<dubbo:reference id="accountManager" version="0.3.0"
		interface="com.tpadsz.uic.user.api.AccountManager" validation="true" />
	<dubbo:reference id="queryManager" version="0.3.0"
		interface="com.tpadsz.uic.user.api.QueryManager" validation="true" />
	<dubbo:reference id="infoManager" version="0.3.0"
		interface="com.tpadsz.uic.user.api.InfoManager" validation="true" />
	<dubbo:reference id="validationManager" version="0.3.0"
		interface="com.tpadsz.uic.user.api.ValidationManager" validation="true" />
	<dubbo:reference id="tokenManager" version="0.3.0"
		interface="com.tpadsz.uic.user.api.TokenManager" validation="true" />

	<dubbo:reference id="imageManager" version="0.1.1" interface="com.tpadsz.img.api.ImageManager" validation="true" />
	
	<dubbo:reference id="coinsAccountManager" version="0.2.0"
		interface="com.tpadsz.cic.coin.api.CoinsAccountManager" validation="true" />
	<dubbo:reference id="coinsConsumerManager" version="0.2.0"
		interface="com.tpadsz.cic.coin.api.CoinsConsumerManager" validation="true" />
	<dubbo:reference id="coinsEarnerManager" version="0.2.0"
		interface="com.tpadsz.cic.coin.api.CoinsEarnerManager" validation="true" />
	
	<dubbo:reference id="userManager" version="0.3.0"
		interface="com.tpadsz.ctc.api.UserManager" validation="true" />
	<dubbo:reference id="shelfManager" version="0.3.0"
		interface="com.tpadsz.ctc.api.ShelfManager" validation="true" />
	<dubbo:reference id="taskManager" version="0.3.0"
		interface="com.tpadsz.ctc.api.TaskManager" validation="true" />
	<dubbo:reference id="settingManager" version="0.3.0"
		interface="com.tpadsz.ctc.api.SettingManager" validation="true" />	
		
	<!-- QuartZ 配置 -->
	<!-- 线程执行器配置，用于任务注册 -->
	<bean id="executor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="1" />
		<property name="maxPoolSize" value="3" />
		<property name="queueCapacity" value="5" />
	</bean>
	<!-- 设置调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="updateGoodsStockAndSalesTrigger"/>
				<ref bean="updateMemberByFillingUidTrigger"/>
				<ref bean="generateTasksTrigger"/>
				<!--<ref bean="refreshIntoLogCountStoreTrigger"/>-->
				<!--<ref bean="refreshIntoSPFileDownloadTrigger"/>-->
			</list>
		</property>
		<property name="taskExecutor" ref="executor" />
	</bean>
	
	<bean id="updateMemberByFillingUidJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="memberService" />
		<property name="targetMethod" value="updateMemberByFillingUid" />
		<property name="concurrent" value="false" /><!--配置为false不允许任务并发执行 -->
	</bean>

	<!-- 调度触发器 -->
	<bean id="updateMemberByFillingUidTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="updateMemberByFillingUidJob" />
		<property name="cronExpression" value="10 0 0/3 * * ?" />
	</bean>
	
	<bean id="updateGoodsStockAndSalesJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="goodsService" />
		<property name="targetMethod" value="updateStockAndSales" />
		<property name="concurrent" value="false" /><!--配置为false不允许任务并发执行 -->
	</bean>

	<!-- 调度触发器 -->
	<bean id="updateGoodsStockAndSalesTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="updateGoodsStockAndSalesJob" />
		<property name="cronExpression" value="0 0/10 * * * ?" />
	</bean>
	
	<bean id="generateTasksJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="taskService" />
		<property name="targetMethod" value="generateTasks" />
		<property name="concurrent" value="false" />
	</bean>

	<!-- 调度触发器 -->
	<bean id="generateTasksTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="generateTasksJob" />
		<property name="cronExpression" value="0 30 3 * * ?" />
	</bean>

	<!--配置自动刷新数据-->
	<!--<bean id="refreshIntoLogCountStoreJob"-->
		  <!--class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="logCountStoreService" />-->
		<!--<property name="targetMethod" value="refreshIntoLogCountStore" />-->
		<!--<property name="concurrent" value="false" />-->
	<!--</bean>-->
	<!--<bean id="refreshIntoLogCountStoreTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">-->
		<!--<property name="jobDetail" ref="refreshIntoLogCountStoreJob" />-->
		<!--<property name="cronExpression" value="0 0 22 * * ?" />-->
	<!--</bean>-->


	<!--配置视频文件日志自动刷新-->
	<!--<bean id="refreshIntoSPFileDownloadJob"-->
		  <!--class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="spFileDownloadService" />-->
		<!--<property name="targetMethod" value="refreshIntoSpFileDownload" />-->
		<!--<property name="concurrent" value="false" />-->
	<!--</bean>-->
	<!--<bean id="refreshIntoSPFileDownloadTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">-->
		<!--<property name="jobDetail" ref="refreshIntoSPFileDownloadJob" />-->
		<!--<property name="cronExpression" value="0 0 23 * * ?" />-->
	<!--</bean>-->

	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<bean name="memcachedClient" destroy-method="shutdown"
		class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean">
		<property name="servers">
			<value>${memcached.url}</value>
		</property>
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />
		</property>
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
		<property name="bufferAllocator">
			<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator" />
		</property>
	</bean>

	<!-- XMemcached客户端 -->
	<bean id="xMemcachedClient" class="com.cache.XMemcachedClient">
		<property name="memcachedClient" ref="memcachedClient" />
		<property name="optTimeout" value="500" />
	</bean>

	<bean id="cacheManager" class="com.cache.MemcacheCacheManager">
		<property name="client" ref="xMemcachedClient" />
		<property name="caches">
			<set>
				<bean class="com.cache.MemcacheCache">
					<property name="name" value="testCache" />
					<property name="client" ref="xMemcachedClient" />
				</bean>
			</set>
		</property>
	</bean>

	<!-- 根据@Pointcut注解定义的切点来自动代理相匹配的Bean -->
	<aop:aspectj-autoproxy />

	<!-- 配置在java类中能够使用Annotation -->
	<context:annotation-config />

	<!-- 配置Annotaton 版本的bean -->
	<context:component-scan base-package="com">
		<context:exclude-filter type="aspectj"
			expression="com.web.*" />
	</context:component-scan>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/model/mybatis/*Mapper.xml" />
		<property name="typeAliasesPackage" value="com.model" />
		<property name="configLocation" value="classpath:/conf/mybatisConfig.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:sqlSessionFactoryBeanName="sqlSessionFactory" p:basePackage="com.dao" />

	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- propagation 默认为requeired isolation 默认为default 所以下面这两项 默认的话可以不配 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" />
			<!-- 剩下的其他方法. -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>

	<!-- aop配置 -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.service..*(..))" />
		<!-- advisor是切入点通知(既包含切入点,有包含通知) -->
		<!-- order 表示AOP的执行顺序, 对于同一个方法配置了order时 , order越低, 优先级越高. -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 配置Jedis的 缓冲池 -->
    <bean id="JedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxIdle="6" p:minEvictableIdleTimeMillis="300000"
          p:numTestsPerEvictionRun="3" p:timeBetweenEvictionRunsMillis="60000">
    </bean>


    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnFactory">
        <property name="defaultSerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

	<!--<beans profile="development">
	<bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/setup.properties, classpath*:/setup.development.properties" />
		<dubbo:registry protocol="zookeeper" address="${zookeeper.url}" />
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${jdbc.minsize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxsize}" />
			<property name="maxWait" value="60000" />
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="false" />
			<property name="filters" value="stat" />
		</bean>
	</beans>-->

	<!--<beans profile="test">
	<bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>
		&lt;!&ndash; 设置属性文件位置 &ndash;&gt;
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/setup.properties, classpath*:/setup.test.properties" />
		<dubbo:registry protocol="zookeeper" address="${zookeeper.url}" />
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${jdbc.minsize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxsize}" />
			<property name="maxWait" value="60000" />
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="false" />
			<property name="filters" value="stat" />
		</bean>
	</beans>-->

	<beans profile="production">
	<bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>

		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/setup.properties, classpath*:/setup.production.properties" />
		<dubbo:registry protocol="zookeeper" address="${zookeeper.url}" />
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${jdbc.minsize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxsize}" />
			<property name="maxWait" value="60000" />
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="false" />
			<property name="filters" value="stat" />
		</bean>
	</beans>

	<!--<beans profile="demo">
	<bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>

		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/setup.properties, classpath*:/setup.demo.properties" />
		<dubbo:registry protocol="zookeeper" address="${zookeeper.url}" />
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${jdbc.minsize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxsize}" />
			<property name="maxWait" value="60000" />
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="false" />
			<property name="filters" value="stat" />
		</bean>
	</beans>

	<beans profile="backup">
	<bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>

		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/setup.properties, classpath*:/setup.demo.properties" />
		<dubbo:registry protocol="zookeeper" address="${zookeeper.url}" />
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${jdbc.minsize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxsize}" />
			<property name="maxWait" value="60000" />
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="false" />
			<property name="filters" value="stat" />
		</bean>
	</beans>-->
</beans>





